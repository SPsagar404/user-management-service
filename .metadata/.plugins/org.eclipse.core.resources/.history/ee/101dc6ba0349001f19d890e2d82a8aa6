package com.user.app.service;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.user.app.exception.UserNotFoundException;
import com.user.app.exception.UsernameAlreadyExistException;
import com.user.app.model.User;
import com.user.app.repository.IUserRepository;

@Service
public class UserServiceImpl implements IUserService,UserDetailsService {
	
	@Autowired
	private IUserRepository repository;
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	@Override
	public User findUserByUserName(String username) throws UserNotFoundException {
		Optional<User> user = repository.findByUsername(username);
		if(user.isEmpty()) {
			throw new UserNotFoundException(username);
		}
		return user.get();
	}

	@Override
	public User createUser(User user) {
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		Optional<User> existingUser = repository.findByUsername(user.getUsername());
		if(existingUser.isPresent()) {
			throw new UsernameAlreadyExistException(user.getUsername());
		}
		return null;
	}

	@Override
	public void deleteUserById(Long id) {
		Optional<User> user = repository.findById(id);
		if(user.isEmpty()) {
			throw new UserNotFoundException();
		}
		repository.deleteById(id);
	}
	
	@Override
	public List<User> getAllUsersList() {
		List<User> users = repository.findAll();
		if(users.isEmpty()) {
			throw new UserNotFoundException();
		}
		return users;
	}
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
		User user = findUserByUserName(username);
		return new org.springframework.security.core.userdetails.User(user.getUsername(),user.getPassword(),Arrays.asList(user.getRole()).stream().map(role->new SimpleGrantedAuthority(role.name())).collect(Collectors.toList()));
	}

	

}
